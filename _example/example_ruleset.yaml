# Ruleset for validating util imports
# This doesn't actually do anything with containers
# Allowed scopes: output, buildtime
# Allowed categories: negative, positived
# Allowed target: command, os, fs
name: Example ruleset
rules:
  - scope: output
    category: Negative
    instruction: |
      depth = command_util.get_ast_depth()
      assert(
        all(
          [len(command_util.get_stage_name(command_util.get_stage_node_at(index))) > 0 for index in range(depth)]
        )
      )
    description: Ensure all stages are named
    id: stage_name
    target: command
  - scope: output
    category: Negative
    instruction: |
      layer_count = fs_util.get_layer_count()
      # -2 as the test image seems funky? So we are just trying this for now
      assert(fs_util.look_for_file("/etc/apt/sources.list.d/debian.sources") == -1)
    description: Ensure apt sources are empty
    id: apt sources empty
    target: fs
    fix_instruction: |
      depth = command_util.get_ast_depth()
      fix_util.add_run_instruction(depth - 1, "rm -rf /etc/apt/sources.list.d/*")
      fix_util.finish()
  - scope: output
    category: Negative
    instruction: |
      assert(os_util.exec_command("whoami") != "root")
    description: Ensure apt sources are empty
    id: apt sources empty
    target: os
